import os
import cPickle
from config import config
from hmmlearn import hmm
import glob
import operator
import numpy as np

if __name__=="__main__":
    methods = glob.glob(os.path.join(config.io.outdir, "*"))
    # predict hiddent states of each method
    for m in methods:
        for result_file in glob.glob(os.path.join(m, "*.txt")):
            if result_file.find('hmm') != -1:
                # skip files generated by hmm model.
                continue
            # init hmm
            model = hmm.GaussianHMM(n_components=2, covariance_type="full")
            hmm_params_file = os.path.join(config.io.model,
                                           result_file.split('/')[-1]+'.pkl')
            with open(hmm_params_file, 'r') as fp:
                params = cPickle.load(fp)
            model.startprob_ = params['S']
            model.transmat_ = params['T']
            model.means_ = np.array([params['E'][0]['mean'],
                                    params['E'][1]['mean']])
            model.covars_ = np.array([params['E'][0]['cov'],
                                     params['E'][1]['cov']])
            """
            model.means_[0] = 10
            model.means_[1] = 10
            model.covars_[0][0] = 100
            model.covars_[1][0] = 100
            print model.means_
            print model.covars_
            """
            # load results generated by method m.
            data = {}
            with open(result_file, 'r') as fp:
                lines = fp.read().strip().split('\n')[1:]
                for l in lines:
                    day, user, red, loss = l.split(' ')
                    user = int(float(user))
                    day = int(float(day))
                    red = int(float(red))
                    if red > 1:
                        red = 1
                    loss = float(loss)
                    if user not in data:
                        data[user] = {}
                        data[user]['day'] = [day]
                        data[user]['red'] = [red]
                        data[user]['mean'] = loss
                        data[user]['mov_mean'] = loss
                        data[user]['count'] = 1
                        data[user]['feat'] = []
                    else:
                        assert day>data[user]['day'][-1], "%d vs %d" % (
                            day, data[user]['day'][-1])
                        data[user]['count'] += 1
                        data[user]['day'].append(day)
                        data[user]['red'].append(red)
                        c1 = 1.0/data[user]['count']
                        c2 = 1.0-c1
                        data[user]['mean'] = c1*loss + c2*data[user]['mean']
                        data[user]['mov_mean'] = 0.3*loss + 0.7*data[user]['mov_mean']
                    if config.hmm.nfeats == 1:
                        data[user]['feat'].append([loss])
                    else:
                        data[user]['feat'].append([loss, data[user]['mov_mean'],
                                               data[user]['mean']])
                        assert config.hmm.nfeats == 3
            # infer hmm hidden states for method m.
            rst = []
            for user, val in data.items():
                X = np.array(data[user]['feat'])
                probs = model.predict_proba(X)
                days = val['day']
                reds = val['red']
                probs = list(probs[:,1])
                assert len(reds)==len(days)==len(probs)
                for day, red, loss in zip(days, reds, probs):
                    rst.append([day, "%d"%user, "%d"%red, "%.6f"%loss])
                """
                if any(reds):
                    print user, sum(reds)
                """
            rst = sorted(rst, key=operator.itemgetter(0))
            output = ["day user red loss"]
            for r in rst:
                output.append(" ".join(["%d"%r[0]] + r[1:]))
            paths = result_file.split('/')
            outfile = "/".join(paths[:-1] + [paths[-1][:-4]+"__hmm__%d.txt"%
                                             config.hmm.nfeats])
            with open(outfile, "w+") as fp:
                fp.write("\n".join(output))


